
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftDISJUNCTIONleftCONJUNCTIONleftNEGATIONleftLESS_THANLESS_EQUALEQUAL_TONOT_EQUALGREATER_EQUALGREATER_THANrightCONSleftMEMBERSHIPleftPLUSMINUSleftTIMESNORMAL_DIVIDEINTEGER_DIVIDEMODULUSrightEXPONENTleftOPEN_INDEXINGCLOSE_INDEXINGleftTUPLE_INDEXINGleftLEFT_PARENTHESISRIGHT_PARENTHESISPAREN_GROUPrightUMINUSCLOSE_CURL CLOSE_INDEXING COMMA CONJUNCTION CONS DISJUNCTION ELSE EQUAL EQUAL_TO EXPONENT FALSE GREATER_EQUAL GREATER_THAN IF INTEGER INTEGER_DIVIDE LEFT_PARENTHESIS LESS_EQUAL LESS_THAN MEMBERSHIP MINUS MODULUS NEGATION NORMAL_DIVIDE NOT_EQUAL OPEN_CURL OPEN_INDEXING PLUS PRINT REAL RIGHT_PARENTHESIS SEMICOLON STRING TIMES TRUE TUPLE_INDEXING VARIABLE WHILEblock : OPEN_CURL CLOSE_CURL\n  | OPEN_CURL multiple_statements CLOSE_CURLstatement : WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS blockstatement : IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS block ELSE blockstatement : IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS blockmultiple_statements : statement\n  |  statement multiple_statementsstatement : expression SEMICOLONstatement : var EQUAL expression SEMICOLONstatement : expression OPEN_INDEXING expression CLOSE_INDEXING EQUAL expression SEMICOLONvar : VARIABLEexpression : varstatement : PRINT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLONexpression : LEFT_PARENTHESIS expression RIGHT_PARENTHESIS %prec PAREN_GROUPexpression : MINUS expression %prec UMINUSexpression : INTEGERexpression : REALexpression : expression PLUS expression \n  | expression MINUS expression\n  | expression TIMES expression\n  | expression NORMAL_DIVIDE expression\n  | expression INTEGER_DIVIDE expression\n  | expression MODULUS expression\n  | expression EXPONENT expressionexpression : TRUEexpression : FALSEexpression : NEGATION expressionexpression : expression CONJUNCTION expressionexpression : expression DISJUNCTION expressionexpression : expression LESS_THAN expressionexpression : expression LESS_EQUAL expressionexpression : expression NOT_EQUAL expressionexpression : expression EQUAL_TO expressionexpression : expression GREATER_THAN expressionexpression : expression GREATER_EQUAL expressioncomma_elements : expression\n  | expression COMMA comma_elementsexpression : OPEN_INDEXING CLOSE_INDEXING\n  | OPEN_INDEXING comma_elements CLOSE_INDEXINGexpression : STRINGexpression : LEFT_PARENTHESIS comma_elements RIGHT_PARENTHESISexpression : expression OPEN_INDEXING expression CLOSE_INDEXINGexpression : TUPLE_INDEXING expression LEFT_PARENTHESIS comma_elements RIGHT_PARENTHESISexpression : expression MEMBERSHIP OPEN_INDEXING comma_elements CLOSE_INDEXING\n  | expression MEMBERSHIP expressionexpression : expression CONS expression'
    
_lr_action_items = {'OPEN_CURL':([0,85,90,102,],[2,2,2,2,]),'$end':([1,3,22,],[0,-1,-2,]),'CLOSE_CURL':([2,3,4,5,22,23,28,91,94,98,99,103,104,],[3,-1,22,-6,-2,-7,-8,-9,-3,-5,-13,-10,-4,]),'WHILE':([2,3,5,22,28,91,94,98,99,103,104,],[6,-1,6,-2,-8,-9,-3,-5,-13,-10,-4,]),'IF':([2,3,5,22,28,91,94,98,99,103,104,],[9,-1,9,-2,-8,-9,-3,-5,-13,-10,-4,]),'PRINT':([2,3,5,22,28,91,94,98,99,103,104,],[12,-1,12,-2,-8,-9,-3,-5,-13,-10,-4,]),'LEFT_PARENTHESIS':([2,3,5,6,7,9,11,12,13,14,15,16,17,18,19,20,21,22,24,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,52,53,54,55,57,58,59,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,82,84,91,94,95,96,97,98,99,100,103,104,],[7,-1,7,24,7,47,7,52,7,-16,-17,-25,-26,7,-40,7,-11,-2,7,-12,-8,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,-38,7,-15,-27,84,-14,7,7,-41,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-33,-34,-35,-45,7,-46,-39,7,-9,-3,-42,7,-39,-5,-13,-43,-10,-4,]),'MINUS':([2,3,5,7,8,10,11,13,14,15,16,17,18,19,20,21,22,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,88,91,94,95,96,97,98,99,100,101,103,104,],[13,-1,13,13,31,-12,13,13,-16,-17,-25,-26,13,-40,13,-11,-2,13,31,-12,-8,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,-38,31,13,-15,31,31,31,-14,13,13,-41,31,-18,-19,-20,-21,-22,-23,-24,31,31,31,31,31,31,31,31,31,13,31,31,31,-39,31,13,31,-42,-9,-3,-42,13,-39,-5,-13,-43,31,-10,-4,]),'INTEGER':([2,3,5,7,11,13,18,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,58,59,78,84,91,94,96,98,99,103,104,],[14,-1,14,14,14,14,14,14,-2,14,-8,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,-9,-3,14,-5,-13,-10,-4,]),'REAL':([2,3,5,7,11,13,18,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,58,59,78,84,91,94,96,98,99,103,104,],[15,-1,15,15,15,15,15,15,-2,15,-8,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,-9,-3,15,-5,-13,-10,-4,]),'TRUE':([2,3,5,7,11,13,18,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,58,59,78,84,91,94,96,98,99,103,104,],[16,-1,16,16,16,16,16,16,-2,16,-8,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-9,-3,16,-5,-13,-10,-4,]),'FALSE':([2,3,5,7,11,13,18,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,58,59,78,84,91,94,96,98,99,103,104,],[17,-1,17,17,17,17,17,17,-2,17,-8,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-9,-3,17,-5,-13,-10,-4,]),'NEGATION':([2,3,5,7,11,13,18,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,58,59,78,84,91,94,96,98,99,103,104,],[18,-1,18,18,18,18,18,18,-2,18,-8,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-9,-3,18,-5,-13,-10,-4,]),'OPEN_INDEXING':([2,3,5,7,8,10,11,13,14,15,16,17,18,19,20,21,22,24,25,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,86,88,91,94,95,96,97,98,99,100,101,103,104,],[11,-1,11,11,29,-12,11,11,-16,-17,-25,-26,11,-40,11,-11,-2,11,58,-12,-8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,78,11,11,11,-38,58,11,-15,58,58,58,-14,11,11,-41,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,11,58,58,58,-39,58,11,58,-42,-9,-3,-42,11,-39,-5,-13,-43,58,-10,-4,]),'STRING':([2,3,5,7,11,13,18,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,58,59,78,84,91,94,96,98,99,103,104,],[19,-1,19,19,19,19,19,19,-2,19,-8,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-9,-3,19,-5,-13,-10,-4,]),'TUPLE_INDEXING':([2,3,5,7,11,13,18,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,58,59,78,84,91,94,96,98,99,103,104,],[20,-1,20,20,20,20,20,20,-2,20,-8,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-9,-3,20,-5,-13,-10,-4,]),'VARIABLE':([2,3,5,7,11,13,18,20,22,24,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,58,59,78,84,91,94,96,98,99,103,104,],[21,-1,21,21,21,21,21,21,-2,21,-8,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-9,-3,21,-5,-13,-10,-4,]),'ELSE':([3,22,98,],[-1,-2,102,]),'SEMICOLON':([8,10,14,15,16,17,19,21,27,49,53,54,57,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,81,82,88,92,95,97,100,101,],[28,-12,-16,-17,-25,-26,-40,-11,-12,-38,-15,-27,-14,-41,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-33,-34,-35,-45,-46,91,-39,-42,99,-42,-39,-43,103,]),'PLUS':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[30,-12,-16,-17,-25,-26,-40,-11,30,-12,-38,30,-15,30,30,30,-14,-41,30,-18,-19,-20,-21,-22,-23,-24,30,30,30,30,30,30,30,30,30,30,30,30,-39,30,30,-42,-42,-39,-43,30,]),'TIMES':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[32,-12,-16,-17,-25,-26,-40,-11,32,-12,-38,32,-15,32,32,32,-14,-41,32,32,32,-20,-21,-22,-23,-24,32,32,32,32,32,32,32,32,32,32,32,32,-39,32,32,-42,-42,-39,-43,32,]),'NORMAL_DIVIDE':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[33,-12,-16,-17,-25,-26,-40,-11,33,-12,-38,33,-15,33,33,33,-14,-41,33,33,33,-20,-21,-22,-23,-24,33,33,33,33,33,33,33,33,33,33,33,33,-39,33,33,-42,-42,-39,-43,33,]),'INTEGER_DIVIDE':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[34,-12,-16,-17,-25,-26,-40,-11,34,-12,-38,34,-15,34,34,34,-14,-41,34,34,34,-20,-21,-22,-23,-24,34,34,34,34,34,34,34,34,34,34,34,34,-39,34,34,-42,-42,-39,-43,34,]),'MODULUS':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[35,-12,-16,-17,-25,-26,-40,-11,35,-12,-38,35,-15,35,35,35,-14,-41,35,35,35,-20,-21,-22,-23,-24,35,35,35,35,35,35,35,35,35,35,35,35,-39,35,35,-42,-42,-39,-43,35,]),'EXPONENT':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[36,-12,-16,-17,-25,-26,-40,-11,36,-12,-38,36,-15,36,36,36,-14,-41,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,-39,36,36,-42,-42,-39,-43,36,]),'CONJUNCTION':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[37,-12,-16,-17,-25,-26,-40,-11,37,-12,-38,37,-15,-27,37,37,-14,-41,37,-18,-19,-20,-21,-22,-23,-24,-28,37,-30,-31,-32,-33,-34,-35,-45,-46,37,37,-39,37,37,-42,-42,-39,-43,37,]),'DISJUNCTION':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[38,-12,-16,-17,-25,-26,-40,-11,38,-12,-38,38,-15,-27,38,38,-14,-41,38,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-33,-34,-35,-45,-46,38,38,-39,38,38,-42,-42,-39,-43,38,]),'LESS_THAN':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[39,-12,-16,-17,-25,-26,-40,-11,39,-12,-38,39,-15,39,39,39,-14,-41,39,-18,-19,-20,-21,-22,-23,-24,39,39,-30,-31,-32,-33,-34,-35,-45,-46,39,39,-39,39,39,-42,-42,-39,-43,39,]),'LESS_EQUAL':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[40,-12,-16,-17,-25,-26,-40,-11,40,-12,-38,40,-15,40,40,40,-14,-41,40,-18,-19,-20,-21,-22,-23,-24,40,40,-30,-31,-32,-33,-34,-35,-45,-46,40,40,-39,40,40,-42,-42,-39,-43,40,]),'NOT_EQUAL':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[41,-12,-16,-17,-25,-26,-40,-11,41,-12,-38,41,-15,41,41,41,-14,-41,41,-18,-19,-20,-21,-22,-23,-24,41,41,-30,-31,-32,-33,-34,-35,-45,-46,41,41,-39,41,41,-42,-42,-39,-43,41,]),'EQUAL_TO':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[42,-12,-16,-17,-25,-26,-40,-11,42,-12,-38,42,-15,42,42,42,-14,-41,42,-18,-19,-20,-21,-22,-23,-24,42,42,-30,-31,-32,-33,-34,-35,-45,-46,42,42,-39,42,42,-42,-42,-39,-43,42,]),'GREATER_THAN':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[43,-12,-16,-17,-25,-26,-40,-11,43,-12,-38,43,-15,43,43,43,-14,-41,43,-18,-19,-20,-21,-22,-23,-24,43,43,-30,-31,-32,-33,-34,-35,-45,-46,43,43,-39,43,43,-42,-42,-39,-43,43,]),'GREATER_EQUAL':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[44,-12,-16,-17,-25,-26,-40,-11,44,-12,-38,44,-15,44,44,44,-14,-41,44,-18,-19,-20,-21,-22,-23,-24,44,44,-30,-31,-32,-33,-34,-35,-45,-46,44,44,-39,44,44,-42,-42,-39,-43,44,]),'MEMBERSHIP':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[45,-12,-16,-17,-25,-26,-40,-11,45,-12,-38,45,-15,45,45,45,-14,-41,45,-18,-19,-20,-21,-22,-23,-24,45,45,45,45,45,45,45,45,-45,45,45,45,-39,45,45,-42,-42,-39,-43,45,]),'CONS':([8,10,14,15,16,17,19,21,25,27,49,51,53,54,55,56,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,86,88,95,97,100,101,],[46,-12,-16,-17,-25,-26,-40,-11,46,-12,-38,46,-15,46,46,46,-14,-41,46,-18,-19,-20,-21,-22,-23,-24,46,46,46,46,46,46,46,46,-45,46,46,46,-39,46,46,-42,-42,-39,-43,46,]),'EQUAL':([10,21,88,],[48,-11,96,]),'CLOSE_INDEXING':([11,14,15,16,17,19,21,27,49,50,51,53,54,57,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,82,86,87,89,95,97,100,],[49,-16,-17,-25,-26,-40,-11,-12,-38,82,-36,-15,-27,-14,-41,88,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-33,-34,-35,-45,49,-46,-39,95,-37,97,-42,-39,-43,]),'RIGHT_PARENTHESIS':([14,15,16,17,19,21,25,26,27,49,51,53,54,56,57,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,82,83,87,93,95,97,100,],[-16,-17,-25,-26,-40,-11,57,60,-12,-38,-36,-15,-27,85,-14,-41,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-33,-34,-35,-45,-46,90,-39,92,-37,100,-42,-39,-43,]),'COMMA':([14,15,16,17,19,21,25,27,49,51,53,54,57,60,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,82,95,97,100,],[-16,-17,-25,-26,-40,-11,59,-12,-38,59,-15,-27,-14,-41,-18,-19,-20,-21,-22,-23,-24,-28,-29,-30,-31,-32,-33,-34,-35,-45,-46,-39,-42,-39,-43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'block':([0,85,90,102,],[1,94,98,104,]),'multiple_statements':([2,5,],[4,23,]),'statement':([2,5,],[5,5,]),'expression':([2,5,7,11,13,18,20,24,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,58,59,78,84,96,],[8,8,25,51,53,54,55,56,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,83,86,51,51,51,101,]),'var':([2,5,7,11,13,18,20,24,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,52,58,59,78,84,96,],[10,10,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'comma_elements':([7,11,59,78,84,],[26,50,87,89,93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> block","S'",1,None,None,None),
  ('block -> OPEN_CURL CLOSE_CURL','block',2,'p_block','sbml.py',1178),
  ('block -> OPEN_CURL multiple_statements CLOSE_CURL','block',3,'p_block','sbml.py',1179),
  ('statement -> WHILE LEFT_PARENTHESIS expression RIGHT_PARENTHESIS block','statement',5,'p_while_statement','sbml.py',1186),
  ('statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS block ELSE block','statement',7,'p_if_else_statement','sbml.py',1192),
  ('statement -> IF LEFT_PARENTHESIS expression RIGHT_PARENTHESIS block','statement',5,'p_if_statement','sbml.py',1197),
  ('multiple_statements -> statement','multiple_statements',1,'p_multiple_statements','sbml.py',1206),
  ('multiple_statements -> statement multiple_statements','multiple_statements',2,'p_multiple_statements','sbml.py',1207),
  ('statement -> expression SEMICOLON','statement',2,'p_statement','sbml.py',1216),
  ('statement -> var EQUAL expression SEMICOLON','statement',4,'p_variable_assignment','sbml.py',1221),
  ('statement -> expression OPEN_INDEXING expression CLOSE_INDEXING EQUAL expression SEMICOLON','statement',7,'p_variable_update','sbml.py',1226),
  ('var -> VARIABLE','var',1,'p_variable','sbml.py',1231),
  ('expression -> var','expression',1,'p_var','sbml.py',1235),
  ('statement -> PRINT LEFT_PARENTHESIS expression RIGHT_PARENTHESIS SEMICOLON','statement',5,'p_print_statement','sbml.py',1239),
  ('expression -> LEFT_PARENTHESIS expression RIGHT_PARENTHESIS','expression',3,'p_parenthesis_group','sbml.py',1246),
  ('expression -> MINUS expression','expression',2,'p_expr_uminus','sbml.py',1251),
  ('expression -> INTEGER','expression',1,'p_integer','sbml.py',1256),
  ('expression -> REAL','expression',1,'p_real','sbml.py',1260),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','sbml.py',1268),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','sbml.py',1269),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','sbml.py',1270),
  ('expression -> expression NORMAL_DIVIDE expression','expression',3,'p_expression_binop','sbml.py',1271),
  ('expression -> expression INTEGER_DIVIDE expression','expression',3,'p_expression_binop','sbml.py',1272),
  ('expression -> expression MODULUS expression','expression',3,'p_expression_binop','sbml.py',1273),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression_binop','sbml.py',1274),
  ('expression -> TRUE','expression',1,'p_true','sbml.py',1287),
  ('expression -> FALSE','expression',1,'p_false','sbml.py',1291),
  ('expression -> NEGATION expression','expression',2,'p_prop_negation','sbml.py',1298),
  ('expression -> expression CONJUNCTION expression','expression',3,'p_prop_conjunction','sbml.py',1302),
  ('expression -> expression DISJUNCTION expression','expression',3,'p_prop_disjunction','sbml.py',1306),
  ('expression -> expression LESS_THAN expression','expression',3,'p_less_than','sbml.py',1313),
  ('expression -> expression LESS_EQUAL expression','expression',3,'p_less_equal','sbml.py',1317),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_prop_not_equal','sbml.py',1321),
  ('expression -> expression EQUAL_TO expression','expression',3,'p_equal_to','sbml.py',1325),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_greater_than','sbml.py',1329),
  ('expression -> expression GREATER_EQUAL expression','expression',3,'p_greater_equal','sbml.py',1333),
  ('comma_elements -> expression','comma_elements',1,'p_comma_elements','sbml.py',1339),
  ('comma_elements -> expression COMMA comma_elements','comma_elements',3,'p_comma_elements','sbml.py',1340),
  ('expression -> OPEN_INDEXING CLOSE_INDEXING','expression',2,'p_sbml_list','sbml.py',1349),
  ('expression -> OPEN_INDEXING comma_elements CLOSE_INDEXING','expression',3,'p_sbml_list','sbml.py',1350),
  ('expression -> STRING','expression',1,'p_string','sbml.py',1358),
  ('expression -> LEFT_PARENTHESIS comma_elements RIGHT_PARENTHESIS','expression',3,'p_tuple','sbml.py',1363),
  ('expression -> expression OPEN_INDEXING expression CLOSE_INDEXING','expression',4,'p_indexing','sbml.py',1371),
  ('expression -> TUPLE_INDEXING expression LEFT_PARENTHESIS comma_elements RIGHT_PARENTHESIS','expression',5,'p_tuple_indexing','sbml.py',1377),
  ('expression -> expression MEMBERSHIP OPEN_INDEXING comma_elements CLOSE_INDEXING','expression',5,'p_membership','sbml.py',1381),
  ('expression -> expression MEMBERSHIP expression','expression',3,'p_membership','sbml.py',1382),
  ('expression -> expression CONS expression','expression',3,'p_cons','sbml.py',1390),
]
